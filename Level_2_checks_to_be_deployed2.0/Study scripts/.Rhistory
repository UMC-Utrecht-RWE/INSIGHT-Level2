rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
if(check2) system.time(render("Report_2_2.Rmd", output_dir = output_dir))
if(check4) system.time(render("Report_2_3.Rmd", output_dir = output_dir))
if(check2) system.time(render("Report_2_4.Rmd", output_dir = output_dir))
if(check1) system.time(render("Report_2_5.Rmd", output_dir = output_dir))
if(check1) system.time(render("Report_2_6.Rmd", output_dir = output_dir))
if(check1) system.time(render("Report_2_7.Rmd", output_dir = output_dir))
if(check2 & check3) system.time(render("Report_2_8.Rmd", output_dir = output_dir))
source(paste0(projectFolder,"/","99_path.R"))
source(paste0(projectFolder,"/Functions/IMPORT_PATTERN.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
## Import d.PERSONS (+ basic check if input is correctly formatted). Replace character vallues '' and ' ' by NA
d.PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = dir.data)
grepl('PERSONS', files)
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
## Get all .csv files in dir.data
files <- dir(dir.data, pattern = '.csv')
## Combine info in one matrix: list all EVENTS, MEDICINES, PROCEDURES, VACCINES and MEDICAL_OBSERVATIONS tables (d), variables of interest (v) and the name of the 'meaning' column
m <- rbind(
expand.grid(TABLE = 'EVENTS', d.DATES = files[grepl('^EVENTS', files)], 					v.DATES = c('start_date_record'), 				v.MEANING = 'meaning_of_event', 		stringsAsFactors = F),
expand.grid(TABLE = 'MEDICINES', d.DATES = files[grepl('^MEDICINES', files)], 				v.DATES = c('date_dispensing', 'date_prescription'), 	v.MEANING = 'meaning_of_drug_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'PROCEDURES', d.DATES = files[grepl('^PROCEDURES', files)], 				v.DATES = c('procedure_date'), 				v.MEANING = 'meaning_of_procedure', 	stringsAsFactors = F),
expand.grid(TABLE = 'VACCINES', d.DATES = files[grepl('^VACCINES', files)], 					v.DATES = c('vx_record_date', 'vx_admin_date'), 	v.MEANING = 'meaning_of_vx_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'MEDICAL_OBSERVATIONS', d.DATES = files[grepl('^MEDICAL_OBSERVATIONS', files)], 	v.DATES = c('mo_date'), 					v.MEANING = 'mo_meaning', 			stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_ID', d.DATES = files[grepl('^SURVEY_ID', files)], 				v.DATES = c('survey_date'), 					v.MEANING = 'survey_meaning', 		stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_OBSERVATIONS', d.DATES = files[grepl('^SURVEY_OBSERVATIONS', files)], 	v.DATES = c('so_date'), 					v.MEANING = 'so_meaning', 			stringsAsFactors = F)
)
View(m)
View(m)
## Import d.PERSONS (+ basic check if input is correctly formatted). Replace character vallues '' and ' ' by NA
d.PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = dir.data, colls = c('person_id', 'day_of_death', 'month_of_death', 'year_of_death'))
d.PERSONS.colnames <- colnames(d.PERSONS)
if(ncol(d.PERSONS) == 1 | length(colnames(d.PERSONS)) != length(d.PERSONS.colnames)) stop('Problem with importing PERSONS.csv, please check if formatted correctly.')
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
if(!require('DT')) install.packages('DT', repos = 'https://cloud.r-project.org')
library('DT')
source('R_functions.R')
res2.1 <- run_check_2.1(dir.data = dir.data)
## If dir.data doesn't end with /, add it
if(substr(dir.data, nchar(dir.data), nchar(dir.data)) != '/') dir.data <- paste0(dir.data, '/')
## Get all .csv files in dir.data
files <- dir(dir.data, pattern = '.csv')
## Stop if PERSONS.csv is not available
if(!any(grepl('PERSONS', files))) stop('PERSONS.csv is not in dir.data. Execution halted')
## If dir.data doesn't end with /, add it
if(substr(dir.data, nchar(dir.data), nchar(dir.data)) != '/') dir.data <- paste0(dir.data, '/')
## Get all .csv files in dir.data
files <- dir(dir.data, pattern = '.csv')
## Stop if PERSONS.csv is not available
if(!any(grepl('PERSONS', files))) stop('PERSONS.csv is not in dir.data. Execution halted')
## Combine info in one matrix: list all EVENTS, MEDICINES, PROCEDURES, VACCINES and MEDICAL_OBSERVATIONS tables (d), variables of interest (v) and the name of the 'meaning' column
m <- rbind(
expand.grid(TABLE = 'EVENTS', d.DATES = files[grepl('^EVENTS', files)], 					v.DATES = c('start_date_record'), 				v.MEANING = 'meaning_of_event', 		stringsAsFactors = F),
expand.grid(TABLE = 'MEDICINES', d.DATES = files[grepl('^MEDICINES', files)], 				v.DATES = c('date_dispensing', 'date_prescription'), 	v.MEANING = 'meaning_of_drug_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'PROCEDURES', d.DATES = files[grepl('^PROCEDURES', files)], 				v.DATES = c('procedure_date'), 				v.MEANING = 'meaning_of_procedure', 	stringsAsFactors = F),
expand.grid(TABLE = 'VACCINES', d.DATES = files[grepl('^VACCINES', files)], 					v.DATES = c('vx_record_date', 'vx_admin_date'), 	v.MEANING = 'meaning_of_vx_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'MEDICAL_OBSERVATIONS', d.DATES = files[grepl('^MEDICAL_OBSERVATIONS', files)], 	v.DATES = c('mo_date'), 					v.MEANING = 'mo_meaning', 			stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_ID', d.DATES = files[grepl('^SURVEY_ID', files)], 				v.DATES = c('survey_date'), 					v.MEANING = 'survey_meaning', 		stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_OBSERVATIONS', d.DATES = files[grepl('^SURVEY_OBSERVATIONS', files)], 	v.DATES = c('so_date'), 					v.MEANING = 'so_meaning', 			stringsAsFactors = F)
)
## Output objects
Warnings <- vector('list', length = nrow(m))
Results <- vector('list', length = nrow(m))
## Import d.PERSONS (+ basic check if input is correctly formatted). Replace character vallues '' and ' ' by NA
d.PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = dir.data, colls = c('person_id', 'day_of_death', 'month_of_death', 'year_of_death'))
d.PERSONS.colnames <- colnames(d.PERSONS)
if(ncol(d.PERSONS) == 1 | length(colnames(d.PERSONS)) != length(d.PERSONS.colnames)) stop('Problem with importing PERSONS.csv, please check if formatted correctly.')
## If d.PERSONS is empty, give an error
if(nrow(d.PERSONS) == 0) stop('PERSONS.csv is empty.')
## Start for loop
for(i in 1:nrow(m)){
## Read data file i + some basic checks
d.DATES <- fread(paste0(dir.data, m$d.DATES[i]), sep = ',', stringsAsFactors = FALSE, fill = TRUE)
d.DATES.colnames <- colnames(fread(paste0(dir.data, m$d.DATES[i]), sep = ',', nrows = 0, stringsAsFactors = FALSE))
if(ncol(d.DATES) == 1 | length(colnames(d.DATES)) != length(d.DATES.colnames)) stop(paste0('Problem with importing ', m$d.DATES[i], ', please check if formatted correctly.'))
if(nrow(d.DATES) == 0) next 	## If the data file is empty - continue to next
## Split data in 'numchunks' chunks to limit memory issues
numchunks <- ceiling(nrow(d.DATES) / nb_row)
all.Results <- list()		## Temporarily store output
all.Warnings <- list()		## Temporarily store output
## Start for loop per chunk
for(k in 1:numchunks){
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.1(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
all.Results[[k]] <- as.data.table(tmp.Out["Results"])
all.Warnings[[k]] <- as.data.table(tmp.Out["Warnings"])
## Remove objects
rm(tmp.d.DATES, tmp.Out)
}
## Combine the chunk-specific results and warnings
all.Results <- do.call(rbind, all.Results)
all.Results <- all.Results[, lapply(.SD, sum), .SDcols = c('Results.issues', 'Results.total'), by = Results.meaning]
colnames(all.Results) <- c('meaning', 'issues', 'total')
all.Warnings <- do.call(rbind, all.Warnings)
all.Warnings <- all.Warnings[, lapply(.SD, sum), .SDcols = c('Warnings.n.pre', 'Warnings.n.post')]
all.Warnings <- paste('Unable to perform check for', all.Warnings[['Warnings.n.pre']] - all.Warnings[['Warnings.n.post']], 'out of', all.Warnings[['Warnings.n.pre']], 'rows.')
## Store output
tmp <- list(Results = all.Results, Warnings = all.Warnings)
Warnings[[i]] <- as.data.frame(cbind(m[i, c('TABLE', 'd.DATES', 'v.DATES')], Warning = as.character(tmp$Warnings), stringsAsFactors = FALSE))
Results[[i]] <- as.data.frame(cbind(m[i,][rep(seq_len(nrow(m[i,])), each = nrow(tmp$Results)),], tmp$Results, stringsAsFactors = FALSE))
## Remove objects and close loop
rm(d.DATES.colnames, d.DATES, tmp, which.char, all.Results, all.Warnings)
}
nb_row <- NB
## Start for loop
for(i in 1:nrow(m)){
## Read data file i + some basic checks
d.DATES <- fread(paste0(dir.data, m$d.DATES[i]), sep = ',', stringsAsFactors = FALSE, fill = TRUE)
d.DATES.colnames <- colnames(fread(paste0(dir.data, m$d.DATES[i]), sep = ',', nrows = 0, stringsAsFactors = FALSE))
if(ncol(d.DATES) == 1 | length(colnames(d.DATES)) != length(d.DATES.colnames)) stop(paste0('Problem with importing ', m$d.DATES[i], ', please check if formatted correctly.'))
if(nrow(d.DATES) == 0) next 	## If the data file is empty - continue to next
## Split data in 'numchunks' chunks to limit memory issues
numchunks <- ceiling(nrow(d.DATES) / nb_row)
all.Results <- list()		## Temporarily store output
all.Warnings <- list()		## Temporarily store output
## Start for loop per chunk
for(k in 1:numchunks){
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.1(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
all.Results[[k]] <- as.data.table(tmp.Out["Results"])
all.Warnings[[k]] <- as.data.table(tmp.Out["Warnings"])
## Remove objects
rm(tmp.d.DATES, tmp.Out)
}
## Combine the chunk-specific results and warnings
all.Results <- do.call(rbind, all.Results)
all.Results <- all.Results[, lapply(.SD, sum), .SDcols = c('Results.issues', 'Results.total'), by = Results.meaning]
colnames(all.Results) <- c('meaning', 'issues', 'total')
all.Warnings <- do.call(rbind, all.Warnings)
all.Warnings <- all.Warnings[, lapply(.SD, sum), .SDcols = c('Warnings.n.pre', 'Warnings.n.post')]
all.Warnings <- paste('Unable to perform check for', all.Warnings[['Warnings.n.pre']] - all.Warnings[['Warnings.n.post']], 'out of', all.Warnings[['Warnings.n.pre']], 'rows.')
## Store output
tmp <- list(Results = all.Results, Warnings = all.Warnings)
Warnings[[i]] <- as.data.frame(cbind(m[i, c('TABLE', 'd.DATES', 'v.DATES')], Warning = as.character(tmp$Warnings), stringsAsFactors = FALSE))
Results[[i]] <- as.data.frame(cbind(m[i,][rep(seq_len(nrow(m[i,])), each = nrow(tmp$Results)),], tmp$Results, stringsAsFactors = FALSE))
## Remove objects and close loop
rm(d.DATES.colnames, d.DATES, tmp, which.char, all.Results, all.Warnings)
}
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.1(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
all.Results[[k]] <- as.data.table(tmp.Out["Results"])
all.Warnings[[k]] <- as.data.table(tmp.Out["Warnings"])
## Remove objects
rm(tmp.d.DATES, tmp.Out)
## Read data file i + some basic checks
d.DATES <- fread(paste0(dir.data, m$d.DATES[i]), sep = ',', stringsAsFactors = FALSE, fill = TRUE)
d.DATES.colnames <- colnames(fread(paste0(dir.data, m$d.DATES[i]), sep = ',', nrows = 0, stringsAsFactors = FALSE))
if(ncol(d.DATES) == 1 | length(colnames(d.DATES)) != length(d.DATES.colnames)) stop(paste0('Problem with importing ', m$d.DATES[i], ', please check if formatted correctly.'))
if(nrow(d.DATES) == 0) next 	## If the data file is empty - continue to next
## Split data in 'numchunks' chunks to limit memory issues
numchunks <- ceiling(nrow(d.DATES) / nb_row)
all.Results <- list()		## Temporarily store output
all.Warnings <- list()		## Temporarily store output
## Start for loop per chunk
for(k in 1:numchunks){
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.1(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
all.Results[[k]] <- as.data.table(tmp.Out["Results"])
all.Warnings[[k]] <- as.data.table(tmp.Out["Warnings"])
## Remove objects
rm(tmp.d.DATES, tmp.Out)
}
## Combine the chunk-specific results and warnings
all.Results <- do.call(rbind, all.Results)
all.Results <- all.Results[, lapply(.SD, sum), .SDcols = c('Results.issues', 'Results.total'), by = Results.meaning]
colnames(all.Results) <- c('meaning', 'issues', 'total')
View(all.Results)
rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
source(paste0(projectFolder,"/Functions/IMPORT_PATTERN.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
source(paste0(projectFolder,"/Functions/IMPORT_PATTERN.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
nb_row = NB
## If dir.data doesn't end with /, add it
if(substr(dir.data, nchar(dir.data), nchar(dir.data)) != '/') dir.data <- paste0(dir.data, '/')
## Get all .csv files in dir.data
files <- dir(dir.data, pattern = '.csv')
## Stop if PERSONS.csv is not available
if(!any(grepl('PERSONS', files))) stop('PERSONS.csv is not in dir.data. Execution halted')
## Combine info in one matrix: list all EVENTS, MEDICINES, PROCEDURES, VACCINES and MEDICAL_OBSERVATIONS tables (d), variables of interest (v) and the name of the 'meaning' column
m <- rbind(
expand.grid(TABLE = 'EVENTS', d.DATES = files[grepl('^EVENTS', files)], 					v.DATES = c('start_date_record'), 				v.MEANING = 'meaning_of_event', 		stringsAsFactors = F),
expand.grid(TABLE = 'MEDICINES', d.DATES = files[grepl('^MEDICINES', files)], 				v.DATES = c('date_dispensing', 'date_prescription'), 	v.MEANING = 'meaning_of_drug_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'PROCEDURES', d.DATES = files[grepl('^PROCEDURES', files)], 				v.DATES = c('procedure_date'), 				v.MEANING = 'meaning_of_procedure', 	stringsAsFactors = F),
expand.grid(TABLE = 'VACCINES', d.DATES = files[grepl('^VACCINES', files)], 					v.DATES = c('vx_record_date', 'vx_admin_date'), 	v.MEANING = 'meaning_of_vx_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'MEDICAL_OBSERVATIONS', d.DATES = files[grepl('^MEDICAL_OBSERVATIONS', files)], 	v.DATES = c('mo_date'), 					v.MEANING = 'mo_meaning', 			stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_ID', d.DATES = files[grepl('^SURVEY_ID', files)], 				v.DATES = c('survey_date'), 					v.MEANING = 'survey_meaning', 		stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_OBSERVATIONS', d.DATES = files[grepl('^SURVEY_OBSERVATIONS', files)], 	v.DATES = c('so_date'), 					v.MEANING = 'so_meaning', 			stringsAsFactors = F)
)
## Output objects
Warnings <- vector('list', length = nrow(m))
Results <- vector('list', length = nrow(m))
## Import d.PERSONS (+ basic check if input is correctly formatted). Replace character vallues '' and ' ' by NA
d.PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = dir.data, colls = c('person_id', 'day_of_death', 'month_of_death', 'year_of_death'))
View(d.PERSONS)
rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
source(paste0(projectFolder,"/Functions/IMPORT_PATTERN.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
rm(list=ls())
if(!require(rmarkdown)){install.packages("rmarkdown")}
library(rmarkdown)
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source(paste0(projectFolder,"/","99_path.R"))
source(paste0(projectFolder,"/Functions/IMPORT_PATTERN.R"))
## Run the individual checks (unless certain essential files are missing)
files <- dir(dir.data, pattern = '.csv')
check1 <- any(grepl('^VISIT_OCCURRENCE', files))
check2 <- any(grepl('^PERSONS', files))
check3 <- any(grepl('^PERSON_RELATIONSHIPS', files))
check4 <- any(grepl('^OBSERVATION_PERIODS', files))
if(!check1) warning('VISIT_OCCURRENCE is missing, checks 5 and 6 are skipped.')
if(!check2) warning('PERSONS is missing, checks 1, 2, 4 and 8 are skipped.')
if(!check3) warning('PERSON_RELATIONSHIPS is missing, check 8 is skipped.')
if(!check4) warning('OBSERVATION_PERIODS is missing, check 3 is skipped.')
if(check2) system.time(render("Report_2_1.Rmd", output_dir = output_dir))
if(check2) system.time(render("Report_2_2.Rmd", output_dir = output_dir))
nb_row = NB
## If dir.data doesn't end with /, add it
if(substr(dir.data, nchar(dir.data), nchar(dir.data)) != '/') dir.data <- paste0(dir.data, '/')
## Get all .csv files in dir.data
files <- dir(dir.data, pattern = '.csv')
## Stop if PERSONS.csv is not available
if(!any(grepl('PERSONS', files))) stop('PERSONS.csv is not in dir.data. Execution halted')
## Combine info in one matrix: list all EVENTS, MEDICINES, PROCEDURES, VACCINES and MEDICAL_OBSERVATIONS tables (d), variables of interest (v) and the name of the 'meaning' column
m <- rbind(
expand.grid(TABLE = 'EVENTS', d.DATES = files[grepl('^EVENTS', files)], 					v.DATES = c('start_date_record'), 				v.MEANING = 'meaning_of_event', 		stringsAsFactors = F),
expand.grid(TABLE = 'MEDICINES', d.DATES = files[grepl('^MEDICINES', files)], 				v.DATES = c('date_dispensing', 'date_prescription'), 	v.MEANING = 'meaning_of_drug_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'PROCEDURES', d.DATES = files[grepl('^PROCEDURES', files)], 				v.DATES = c('procedure_date'), 				v.MEANING = 'meaning_of_procedure', 	stringsAsFactors = F),
expand.grid(TABLE = 'VACCINES', d.DATES = files[grepl('^VACCINES', files)], 					v.DATES = c('vx_record_date', 'vx_admin_date'), 	v.MEANING = 'meaning_of_vx_record', 	stringsAsFactors = F),
expand.grid(TABLE = 'MEDICAL_OBSERVATIONS', d.DATES = files[grepl('^MEDICAL_OBSERVATIONS', files)], 	v.DATES = c('mo_date'), 					v.MEANING = 'mo_meaning', 			stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_ID', d.DATES = files[grepl('^SURVEY_ID', files)], 				v.DATES = c('survey_date'), 					v.MEANING = 'survey_meaning', 		stringsAsFactors = F),
expand.grid(TABLE = 'SURVEY_OBSERVATIONS', d.DATES = files[grepl('^SURVEY_OBSERVATIONS', files)], 	v.DATES = c('so_date'), 					v.MEANING = 'so_meaning', 			stringsAsFactors = F)
)
## Output objects
Warnings <- vector('list', length = nrow(m))
Results <- vector('list', length = nrow(m))
## Import d.PERSONS (+ basic check if input is correctly formatted). Replace character vallues '' and ' ' by NA
d.PERSONS <- IMPORT_PATTERN(pat = "PERSONS", dir = dir.data, colls = c('person_id', 'day_of_death', 'month_of_death', 'year_of_death'))
d.PERSONS.colnames <- colnames(d.PERSONS)
if(ncol(d.PERSONS) == 1 | length(colnames(d.PERSONS)) != length(d.PERSONS.colnames)) stop('Problem with importing PERSONS.csv, please check if formatted correctly.')
## If d.PERSONS is empty, give an error
if(nrow(d.PERSONS) == 0) stop('PERSONS.csv is empty.')
## Start for loop
for(i in 1:nrow(m)){
## Read data file i + some basic checks
d.DATES <- fread(paste0(dir.data, m$d.DATES[i]), sep = ',', stringsAsFactors = FALSE, fill = TRUE)
d.DATES.colnames <- colnames(fread(paste0(dir.data, m$d.DATES[i]), sep = ',', nrows = 0, stringsAsFactors = FALSE))
if(ncol(d.DATES) == 1 | length(colnames(d.DATES)) != length(d.DATES.colnames)) stop(paste0('Problem with importing ', m$d.DATES[i], ', please check if formatted correctly.'))
if(nrow(d.DATES) == 0) next 	## If the data file is empty - continue to next
## Split data in 'numchunks' chunks to limit memory issues
numchunks <- ceiling(nrow(d.DATES) / nb_row)
all.Results <- list()		## Temporarily store output
all.Warnings <- list()		## Temporarily store output
## Start for loop per chunk
for(k in 1:numchunks){
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.2(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
all.Results[[k]] <- as.data.table(tmp.Out["Results"])
all.Warnings[[k]] <- as.data.table(tmp.Out["Warnings"])
## Remove objects
rm(tmp.d.DATES, tmp.Out)
}
## Combine the chunk-specific results and warnings
all.Results <- do.call(rbind, all.Results)
all.Results <- all.Results[, lapply(.SD, sum), .SDcols = c('Results.issues', 'Results.total'), by = Results.meaning]
colnames(all.Results) <- c('meaning', 'issues', 'total')
all.Warnings <- do.call(rbind, all.Warnings)
all.Warnings <- all.Warnings[, lapply(.SD, sum), .SDcols = c('Warnings.n.pre', 'Warnings.n.post')]
all.Warnings <- paste('Unable to perform check for', all.Warnings[['Warnings.n.pre']] - all.Warnings[['Warnings.n.post']], 'out of', all.Warnings[['Warnings.n.pre']], 'rows.')
## Store output
tmp <- list(Results = all.Results, Warnings = all.Warnings)
Warnings[[i]] <- as.data.frame(cbind(m[i, c('TABLE', 'd.DATES', 'v.DATES')], Warning = as.character(tmp$Warnings), stringsAsFactors = FALSE))
Results[[i]] <- as.data.frame(cbind(m[i,][rep(seq_len(nrow(m[i,])), each = nrow(tmp$Results)),], tmp$Results, stringsAsFactors = FALSE))
## Remove objects and close loop
rm(d.DATES.colnames, d.DATES, tmp, which.char, all.Results, all.Warnings)
}
## Read data file i + some basic checks
d.DATES <- fread(paste0(dir.data, m$d.DATES[i]), sep = ',', stringsAsFactors = FALSE, fill = TRUE)
d.DATES.colnames <- colnames(fread(paste0(dir.data, m$d.DATES[i]), sep = ',', nrows = 0, stringsAsFactors = FALSE))
if(ncol(d.DATES) == 1 | length(colnames(d.DATES)) != length(d.DATES.colnames)) stop(paste0('Problem with importing ', m$d.DATES[i], ', please check if formatted correctly.'))
if(nrow(d.DATES) == 0) next 	## If the data file is empty - continue to next
## Split data in 'numchunks' chunks to limit memory issues
numchunks <- ceiling(nrow(d.DATES) / nb_row)
all.Results <- list()		## Temporarily store output
all.Warnings <- list()		## Temporarily store output
## Select chunk
if(k < numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):(k * nb_row),]
if(k == numchunks) 	tmp.d.DATES <- d.DATES[((k - 1) * nb_row + 1):nrow(d.DATES),]
## Formatting empty strings
which.char <- which(sapply(1:ncol(tmp.d.DATES), FUN = function(j) class(tmp.d.DATES[[j]]) == 'character'))
for(j in which.char) if(any(tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '', na.rm = T)) tmp.d.DATES[[j]][!is.na(tmp.d.DATES[[j]]) & (tmp.d.DATES[[j]] == ' ' | tmp.d.DATES[[j]] == '')] <- NA
## Run inner function on chunk
tmp.Out <- fun_check_2.2(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
## Run inner function on chunk
tmp.Out <- fun_check_2.2(d.PERSONS = d.PERSONS, d.DATES = tmp.d.DATES, v.DATES = m$v.DATES[i], v.MEANING = m$v.MEANING[i])
d.DATES = tmp.d.DATES
v.DATES = m$v.DATES[i]
v.MEANING = m$v.MEANING[i]
## INPUT CHECKS
w1 <- w2 <- NA
## Variables required
var.x <- c('person_id', v.DATES, v.MEANING)
var.y <- c('person_id', 'day_of_death', 'month_of_death', 'year_of_death')
## Check
if(any(!(var.y %in% colnames(d.PERSONS))) | any(!(var.x %in% colnames(d.DATES)))){
w1 <- 'At least one required column is either not in the data or is named incorrectly. Execution halted.'
return(list(Warnings = w1, Results = data.frame(Meaning = NA, issues = NA, total = NA)))
}
## n.pre
n.pre <- nrow(d.DATES)
## Set person_id variables to character in both datasets
d.PERSONS[['person_id']] <- as.character(d.PERSONS[['person_id']])
d.DATES[['person_id']] <- as.character(d.DATES[['person_id']])
## If meaning == NA, replace with (NOT ENTERED)
d.DATES[,(v.MEANING) := ifelse(is.na(get(v.MEANING)), '(NOT ENTERED)', get(v.MEANING))]
uniq.meaning <- unique(d.DATES[[v.MEANING]])
## Remove missing values
d.DATES <- d.DATES[!is.na(get(v.DATES)) & !is.na(person_id),]
d.PERSONS <- d.PERSONS[!is.na(person_id),]
## Left join d.PERSONS to d.DATES
d.DATES <- merge(d.DATES[, ..var.x], d.PERSONS[, ..var.y], by = 'person_id', all.x = T)
## If year_of_death is available and so is day_of_death, but month_of_death is missing: Impute month 12 (december)
d.DATES$month_of_death[!is.na(d.DATES$year_of_death) & is.na(d.DATES$month_of_death) & !is.na(d.DATES$day_of_death)] <- 12
## If year_of_death is available but day_of_death and month_of_death are missing: Impute 31 dec
d.DATES$month_of_death[!is.na(d.DATES$year_of_death) & is.na(d.DATES$month_of_death) & is.na(d.DATES$day_of_death)] <- 12
d.DATES$day_of_death[!is.na(d.DATES$year_of_death) & is.na(d.DATES$month_of_death) & is.na(d.DATES$day_of_death)] <- 31
## If year_of_death is available and so is month_of_death but day_of_death is missing: Impute last day of month
d.DATES$day_of_death[!is.na(d.DATES$year_of_death) & !is.na(d.DATES$month_of_death) & is.na(d.DATES$day_of_death) & d.DATES$month_of_death %in% c(1, 3, 5, 7, 8, 10, 12)] <- 31
d.DATES$day_of_death[!is.na(d.DATES$year_of_death) & !is.na(d.DATES$month_of_death) & is.na(d.DATES$day_of_death) & d.DATES$month_of_death %in% c(4, 6, 9, 11)] <- 30
leapyr.check <- function(yr) (yr %% 4 == 0 & yr %% 100 != 0) | yr %% 400 == 0
d.DATES$day_of_death[!is.na(d.DATES$year_of_death) & !is.na(d.DATES$month_of_death) & is.na(d.DATES$day_of_death) & d.DATES$month_of_death == 2 & leapyr.check(d.DATES$year_of_death)] <- 29
leapyr.check(d.DATES$year_of_death)
d.DATES$year_of_death
